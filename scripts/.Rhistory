p + ggtitle("Highest prediction score for each protein", subtitle = NULL)
dev.off()
#Plot highest scoring class prediction score distribution - Boxplot for each class
p <- ggplot(data=df, aes(x=class, y=score, fill=class))
p <- p + geom_boxplot()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + coord_flip()
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.boxplot.png", 750,500, res=100)
p + ggtitle("Highest prediction score for each protein", subtitle = NULL)
dev.off()
p <- ggplot(data=df, aes(x=reoder(class, score), y=score, fill=class))
p <- p + geom_boxplot()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + coord_flip()
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.boxplot.png", 750,500, res=100)
p + ggtitle("Highest prediction score for each protein", subtitle = NULL)
dev.off()
#Plot highest scoring class prediction score distribution - Boxplot for each class
p <- ggplot(data=df, aes(x=reoder(class, score, median), y=score, fill=class))
p <- p + geom_boxplot()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + coord_flip()
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.boxplot.png", 750,500, res=100)
p + ggtitle("Highest prediction score for each protein", subtitle = NULL)
#Plot highest scoring class prediction score distribution - Boxplot for each class
p <- ggplot(data=df, aes(x=reoder(score, median), y=score, fill=class))
p <- p + geom_boxplot()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + coord_flip()
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.boxplot.png", 750,500, res=100)
p + ggtitle("Highest prediction score for each protein", subtitle = NULL)
dev.off()
#Plot highest scoring class prediction score distribution - Boxplot for each class
p <- ggplot(data=df, aes(x=reoder(class, score), y=score, fill=class))
p <- p + geom_boxplot()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + coord_flip()
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.boxplot.png", 750,500, res=100)
p + ggtitle("Highest prediction score for each protein", subtitle = NULL)
#Plot highest scoring class prediction score distribution - Boxplot for each class
p <- ggplot(data=df, aes(x=reoder(class, score), y=score, fill=class))
p <- p + geom_bar()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + coord_flip()
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.boxplot.png", 750,500, res=100)
p + ggtitle("Highest prediction score for each protein", subtitle = NULL)
dev.off()
p <- ggplot(data=df, aes(x=reorder(class, score), y=score, fill=class))
p <- p + geom_boxplot()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + coord_flip()
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.boxplot.png", 750,500, res=100)
p + ggtitle("Highest prediction score for each protein", subtitle = NULL)
dev.off()
#Plot membrane-bound score associated with predicted location
pred
#Plot membrane-bound score associated with predicted location
as.numeric(data$Membrane.bound)
#Plot membrane-bound score associated with predicted location
df <- data.frame(class=classes, membrane_score=as.numeric(data$Membrane.bound))
df
df <- data.frame(class=classes, membrane_score=as.numeric(data$Membrane.bound))
p <- ggplot(data=df, aes(x=reorder(class, membrane_score), y=membrane_score, fill=class))
p <- p + geom_boxplot()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Membrane bound prediction score")
p <- p + coord_flip()
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
p
p + ggtitle("Membrane bound predicted score compared to the predicted location", subtitle = NULL)
#Plot membrane-bound score associated with predicted location
df <- data.frame(class=classes, membrane_score=as.numeric(data$Membrane.bound))
p <- ggplot(data=df, aes(x=reorder(class, membrane_score), y=membrane_score, fill=class))
p <- p + geom_boxplot()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Membrane bound prediction score")
p <- p + coord_flip()
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.MembraneBoundScore.PredictedLocation_MembraneBoundScore.boxplot.png", 750,500, res=100)
p + ggtitle("Membrane bound predicted score compared to the predicted location", subtitle = NULL)
dev.off()
png("deeploc.MembraneBoundScore.PredictedLocation_MembraneBoundScore.boxplot.png", 1000,500, res=100)
p + ggtitle("Membrane bound predicted score compared to the predicted location", subtitle = NULL)
dev.off()
args = commandArgs(trailingOnly=TRUE)
if (length(args) != 1) {
stop("<deeploc_dataset>")
}
args <- c("../results/deeploc_filtered.tsv")
#Read data
swissprot <- read.csv("../results/swissprot_filtered.tsv", sep="\t", header=TRUE)
hpa <- read.csv("../results/hpa_filtered.tsv", sep="\t", header=TRUE)
deeploc <- read.csv(args[1], sep="\t", header=TRUE)
#Read mapping + merge mapping with SwissProt & HPA
mapping <- read.csv("../results/location_mapping3.tsv", sep="\t", header=TRUE)
swissprot_merge <- merge(swissprot, mapping[mapping$target_source=="swissprot",][,1:2], by.x="subcellular_location", by.y="target_location")
hpa_merge <- merge(hpa, mapping[mapping$target_source=="hpa",][,1:2], by.x="subcellular_location", by.y="target_location")
#Data set exploration
print("Number of subcellular locations annotated in SwissProt data set:")
length(unique(swissprot$subcellular_location))
print("Number of swissprot subcellular locations in the location_mapping.tsv:")
length(unique(mapping[mapping$target_source=="swissprot",][,1:2]$target_location))
print("Data set - Swissprot proteins:")
length(unique(swissprot$uniprot_id))
print("Data set - Swissprot_Mapping merge proteins:")
length(unique(swissprot_merge$uniprot_id))
#
#Performance calculation - SwissProt
##Nur Proteine mit einem 1:1 Annotation (1 Prediction + 1 Annotation durch Mapping) werden betrachtet
performance_swissprot <- merge(deeploc, swissprot_merge[c("hgnc","deeploc_location")], by.x="hgnc", by.y="hgnc")
set <- table(performance_swissprot$hgnc)==1
subset <- performance_swissprot[performance_swissprot$hgnc %in% names(set[set]),]
subset$Prediction <- as.character(subset$Prediction)
subset$deeploc_location <- as.character(subset$deeploc_location)
subset$deeploc_location <- gsub(" ", "_", subset$deeploc_location)
all <- length(subset[,1])
true <- table(subset$Prediction==subset$deeploc_location)[2]
false <- table(subset$Prediction==subset$deeploc_location)[1]
cat("Swissprot Performance (1:1 annotation):", true/all, "\n",  sep="\t")
cat("All:", all, "\t", "True:", true, "\t", "False:", false, "\n",  sep=" ")
##Alle Proteine mit einem 1:N Annotation (1 Prediction + N Annotationen durch Mapping) werden betrachtet
performance_swissprot$Prediction <- as.character(performance_swissprot$Prediction)
performance_swissprot$deeploc_location <- as.character(performance_swissprot$deeploc_location)
performance_swissprot$deeploc_location <- gsub(" ", "_", performance_swissprot$deeploc_location)
performance_swissprot <- performance_swissprot[!duplicated(performance_swissprot),]
all <- length(unique(performance_swissprot$hgnc))
true <- table(performance_swissprot$Prediction==performance_swissprot$deeploc_location)[2]
false <- all - true
cat("Swissprot Performance (1:N annotation):", true/all, "\n",  sep="\t")
cat("All:", all, "\t", "True:", true, "\t", "False:", false, "\n", sep=" ")
multiMapping <- table(performance_swissprot$hgnc)
cat("Average number of annotations per protein:", mean(multiMapping[multiMapping!=0]), "\n", sep=" ")
#Performance calculation - HPA
##Nur Proteine mit einem 1:1 Annotation (1 Prediction + 1 Annotation durch Mapping) werden betrachtet
performance_hpa <- merge(deeploc, hpa_merge[c("hgnc","deeploc_location")], by.x="hgnc", by.y="hgnc")
set <- table(performance_hpa$hgnc)==1
subset <- performance_hpa[performance_hpa$hgnc %in% names(set[set]),]
subset$Prediction <- as.character(subset$Prediction)
subset$deeploc_location <- as.character(subset$deeploc_location)
subset$deeploc_location <- gsub(" ", "_", subset$deeploc_location)
all <- length(subset[,1])
true <- table(subset$Prediction==subset$deeploc_location)[2]
false <- table(subset$Prediction==subset$deeploc_location)[1]
cat("HPA Performance (1:1 annotation):", true/all, "\n",  sep="\t")
cat("All:", all, "\t", "True:", true, "\t", "False:", false, "\n",  sep=" ")
##Alle Proteine mit einem 1:N Annotation (1 Prediction + N Annotationen durch Mapping) werden betrachtet
performance_hpa$Prediction <- as.character(performance_hpa$Prediction)
performance_hpa$deeploc_location <- as.character(performance_hpa$deeploc_location)
performance_hpa$deeploc_location <- gsub(" ", "_", performance_hpa$deeploc_location)
performance_hpa <- performance_hpa[!duplicated(performance_hpa),]
all <- length(unique(performance_hpa$hgnc))
true <- table(performance_hpa$Prediction==performance_hpa$deeploc_location)[2]
false <- all - true
cat("HPA Performance (1:N annotation):", true/all, "\n",  sep="\t")
cat("All:", all, "\t", "True:", true, "\t", "False:", false, "\n",  sep=" ")
multiMapping <- table(performance_hpa$hgnc)
cat("Average number of annotations per protein:", mean(multiMapping[multiMapping!=0]), "\n", sep=" ")
#Deeploc filtering
deeploc
args <- c("../../Übung03/DeepLoc.human_proteins_prediction.cutoff_0.5.tsv")
deeploc <- read.csv(args[1], sep="\t", header=TRUE)
#Deeploc filtering
deeploc
#Deeploc filtering
deeploc$Prediction=="no_accurate_estimation"
#Deeploc filtering
deeploc[deeploc$Prediction!="no_accurate_estimation",]
#Deeploc filtering
deeploc <- deeploc[deeploc$Prediction!="no_accurate_estimation",]
args = commandArgs(trailingOnly=TRUE)
deeploc
swissprot_11 <- c(0.74, 0.74, 0.77, 0.85)
swissprot_1n <- c(0.77, 0.77, 0.80, 0.86)
hpa_11 <- c(0.56, 0.56, 0.60, 0.69)
hpa_1n <- c(0.64, 0.64, 0.67, 0.73)
df <- rbind(swissprot_11, swissprot_1n, hpa_11, hpa_1n)
library(reshape)
library(ggplot2)
df <- as.data.frame(df)
colnames(df) <- c(0, 0.25, 0.5, 0.75)
df <- melt(df)
df <- cbind(df, c("swissprot_1:1", "swissprot_1:n", "hpa_1:1", "hpa_1:n"))
colnames(df) <- c("cutoff", "accuracy", "dataset")
png("deeploc.cutoff_differences.png", 1000,500, res=120)
p <- ggplot(df, aes(x=dataset, y=accuracy, fill=cutoff))
p <- p + geom_bar(stat="identity",position="dodge", colour="black")
p <- p + coord_flip()
p <- p + xlab("")
p <- p + ylab("Prediction performance")
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.y = element_text(size=12))
p + ggtitle("Deeploc data set", subtitle = "Cutoff influence on performance")
dev.off()
png("deeploc.cutoff_differences.png", 1000,500, res=120)
p <- ggplot(df, aes(x=dataset, y=accuracy, fill=cutoff))
p <- p + geom_bar(stat="identity",position="dodge", colour="black")
p <- p + coord_flip()
p <- p + xlab("")
p <- p + xlim(0,1)
p <- p + ylab("Prediction performance")
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.y = element_text(size=12))
p + ggtitle("Deeploc data set", subtitle = "Cutoff influence on performance")
dev.off()
p <- p + xlim(c(0,1))
p <- p + xlim(0,1)
png("deeploc.cutoff_differences.png", 1000,500, res=120)
p <- ggplot(df, aes(x=dataset, y=accuracy, fill=cutoff))
p <- p + geom_bar(stat="identity",position="dodge", colour="black")
p <- p + coord_flip()
p <- p + xlab("")
p <- p + xlim(0,1)
p <- p + ylab("Prediction performance")
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.y = element_text(size=12))
p + ggtitle("Deeploc data set", subtitle = "Cutoff influence on performance")
dev.off()
png("deeploc.cutoff_differences.png", 1000,500, res=120)
p <- ggplot(df, aes(x=dataset, y=accuracy, fill=cutoff))
p <- p + geom_bar(stat="identity",position="dodge", colour="black")
p <- p + coord_flip()
p <- p + xlab("")
p <- p + ylab("Prediction performance")
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.y = element_text(size=12))
p + ggtitle("Deeploc data set", subtitle = "Cutoff influence on performance")
dev.off()
p <- p + ylim(0,1)
png("deeploc.cutoff_differences.png", 1000,500, res=120)
p <- ggplot(df, aes(x=dataset, y=accuracy, fill=cutoff))
p <- p + geom_bar(stat="identity",position="dodge", colour="black")
p <- p + coord_flip()
p <- p + xlab("")
p <- p + ylim(0,1)
p <- p + ylab("Prediction performance")
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.y = element_text(size=12))
p + ggtitle("Deeploc data set", subtitle = "Cutoff influence on performance")
dev.off()
#visualise the distribution of predicted compartments for different reliability indices
data
#visualise the distribution of predicted compartments for different reliability indices
head(data)
classes <- colnames(pred)[apply(pred, 1, which.max)]
scores <- apply(pred, 1, max)
df <- data.frame(class=classes, score=scores)
head(df)
p <- ggplot(df, aes(x=score, y=class))
p <- p + geom_violin()
p
p <- ggplot(df, aes(x=class, y=score))
p <- p + geom_violin()
p
p <- ggplot(df, aes(x=class, y=score))
p <- p + geom_violin()
p <- p + coord_flip()
p
p <- ggplot(df, aes(x=class, y=score))
p <- p + geom_violin(trim=FALSE)
p <- p + coord_flip()
p
p <- ggplot(df, aes(x=class, y=score))
p <- p + geom_violin(trim=TRUE)
p <- p + coord_flip()
p
p <- ggplot(df, aes(x=class, y=score))
p <- p + geom_violin(trim=FALSE)
p <- p + coord_flip()
p
p <- p + geom_violin(trim=TRUE)
p <- p + coord_flip()
p
p <- ggplot(df, aes(x=class, y=score))
p <- p + geom_violin(trim=TRUE)
p <- p + coord_flip()
p
p <- ggplot(df, aes(x=class, y=score))
p <- p + geom_violin(trim=TRUE)
p <- p + coord_flip()
p <- p + ylim(0,1)
p
p <- ggplot(df, aes(x=class, y=score, fill=class))
p <- p + geom_violin(trim=TRUE)
#p <- p + coord_flip()
p <- p + ylim(0,1)
p
p <- ggplot(df, aes(x=class, y=score, fill=class))
p <- p + geom_violin(trim=TRUE)
p <- p + coord_flip()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + ylim(0,1)
p
#visualise the distribution of predicted compartments for different reliability indices
classes <- colnames(pred)[apply(pred, 1, which.max)]
scores <- apply(pred, 1, max)
df <- data.frame(class=classes, score=scores)
p <- ggplot(df, aes(x=class, y=score, fill=class))
p <- p + geom_violin(trim=TRUE)
p <- p + coord_flip()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + ylim(0,1)
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.violin.png", 750,500, res=100)
p + ggtitle("Predicted compartment distribution for different reliability indices", subtitle = NULL)
dev.off()
#visualise the distribution of predicted compartments for different reliability indices
classes <- colnames(pred)[apply(pred, 1, which.max)]
scores <- apply(pred, 1, max)
df <- data.frame(class=classes, score=scores)
p <- ggplot(df, aes(x=class, y=score, fill=class))
p <- p + geom_violin(trim=TRUE)
p <- p + coord_flip()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + ylim(0,1)
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.violin.png", 1000,500, res=100)
p + ggtitle("Predicted compartment distribution for different reliability indices", subtitle = NULL)
dev.off()
classes <- colnames(pred)[apply(pred, 1, which.max)]
scores <- apply(pred, 1, max)
df <- data.frame(class=classes, score=scores)
p <- ggplot(df, aes(x=class, y=score, fill=class))
p <- p + geom_violin(trim=TRUE)
p <- p + coord_flip()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + ylim(0,1)
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.violin.png", 1000,600, res=100)
p + ggtitle("Predicted compartment distribution for different reliability indices", subtitle = NULL)
dev.off()
#visualise the distribution of predicted compartments for different reliability indices
classes <- colnames(pred)[apply(pred, 1, which.max)]
scores <- apply(pred, 1, max)
df <- data.frame(class=classes, score=scores)
p <- ggplot(df, aes(x=class, y=score, fill=class))
p <- p + geom_violin(trim=TRUE)
p <- p + coord_flip()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + ylim(0,1)
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.violin.png", 1000,500, res=100)
p + ggtitle("Predicted compartment distribution for different reliability indices", subtitle = NULL)
dev.off()
library("ggplot2")
data <- read.csv("../data/DeepLoc.human_proteins_prediction.txt", sep="\t", header=TRUE)
df <- as.data.frame(table(data[,2]))
#Plot class prediction distribution
png("deeploc.prediction_distribution.png", 1000,500, res=120)
p <- ggplot(df, aes(x=reorder(Var1, -Freq), y=Freq, fill=Var1))
p <- p + geom_bar(stat="identity",position="dodge", colour="black")
p <- p + coord_flip()
p <- p + xlab("")
p <- p + ylab("Number of predictions")
p <- p + guides(fill=FALSE)
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.y = element_text(size=12))
p + ggtitle("Deeploc data set", subtitle = "Location prediction distribution")
dev.off()
#Plot all class prediction score distribution
pred <- data[,-1:-3]
png("deeploc.predictionScore_distribution.all_classes.png", 500,500, res=100)
hist(as.numeric(unlist(pred)), breaks=25, col=rainbow(100), xlab="Prediction score", main="All class prediction score distribution")
dev.off()
#Plot membrane bound prediction score distribution
png("deeploc.predictionScore_distribution.membrane_bound.png", 500,500, res=100)
hist(as.numeric(data$Membrane.bound), breaks=25, col=rainbow(100), xlab="Prediction score", main="Membrane bound prediction score distribution")
dev.off()
#Plot highest scoring class prediction score distribution - all
png("deeploc.HighestpredictionScore_distribution.all_classes.png", 500,500, res=100)
hist(apply(pred, 1, max), breaks=25, col=rainbow(100), xlab="Prediction score", main="Highest prediction score distribution")
dev.off()
#Plot highest scoring class prediction score distribution - density for each class
classes <- colnames(pred)[apply(pred, 1, which.max)]
scores <- apply(pred, 1, max)
df <- data.frame(class=classes, score=scores)
p <- ggplot(df, aes(score, fill=class))
p <- p + geom_density(alpha=.5)
p <- p + theme(	axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Prediction score")
p <- p + ylab("Density")
png("deeploc.HighestpredictionScore_distribution.density.png", 750,500, res=100)
p + ggtitle("Highest prediction score for each protein", subtitle = NULL)
dev.off()
#Plot highest scoring class prediction score distribution - Boxplot for each class
p <- ggplot(data=df, aes(x=reorder(class, score), y=score, fill=class))
p <- p + geom_boxplot()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + coord_flip()
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.boxplot.png", 750,500, res=100)
p + ggtitle("Highest prediction score for each protein", subtitle = NULL)
dev.off()
#Plot membrane-bound score associated with predicted location
df <- data.frame(class=classes, membrane_score=as.numeric(data$Membrane.bound))
p <- ggplot(data=df, aes(x=reorder(class, membrane_score), y=membrane_score, fill=class))
p <- p + geom_boxplot()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Membrane bound prediction score")
p <- p + coord_flip()
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.MembraneBoundScore.PredictedLocation_MembraneBoundScore.boxplot.png", 1000,500, res=100)
p + ggtitle("Membrane bound predicted score compared to the predicted location", subtitle = NULL)
dev.off()
#visualise the distribution of predicted compartments for different reliability indices
classes <- colnames(pred)[apply(pred, 1, which.max)]
scores <- apply(pred, 1, max)
df <- data.frame(class=classes, score=scores)
p <- ggplot(df, aes(x=class, y=score, fill=class))
p <- p + geom_violin(trim=TRUE)
p <- p + coord_flip()
p <- p + scale_fill_discrete(name = "Subcellular locations")
p <- p + xlab("Subcellular locations")
p <- p + ylab("Prediction score")
p <- p + ylim(0,1)
p <- p + theme(	axis.text.x = element_text(angle = 0, vjust = 0.5, size=12),
axis.text.y = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
png("deeploc.HighestpredictionScore_distribution.violin.png", 1000,500, res=100)
p + ggtitle("Predicted compartment distribution for different reliability indices", subtitle = NULL)
dev.off()
